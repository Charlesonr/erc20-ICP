import * as CB from "strict-callbag-basics";
import { emitter } from "./emitter.js";
export const asyncPush = (register) => (_) => CB.asyncP((sink) => register(emitter(sink)));
export const async = (register, bufferSize = 16) => (r) => CB.buffer_(asyncPush(register)(r), bufferSize);
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncEmitterPush
 */
export const asyncEmitterPush = () => {
    const [sink, source] = CB.asyncSinkP();
    return [emitter(sink), () => source];
};
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncEmitter
 */
export const asyncEmitter = (bufferSize = 16) => {
    const [sink, source] = CB.asyncSinkP();
    return [emitter(sink), () => CB.buffer_(source, bufferSize)];
};
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncSink
 */
export const asyncSink = () => {
    const [sink, source] = CB.asyncSinkP();
    return [() => sink, () => source];
};
//# sourceMappingURL=async.js.map