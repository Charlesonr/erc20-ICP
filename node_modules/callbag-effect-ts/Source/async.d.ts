import { EffectSink } from "../Sink.js";
import { EffectSource } from "../Source.js";
import { Emitter } from "./emitter.js";
type Cleanup = () => void;
type Register<E, A> = (emit: Emitter<E, A>) => Cleanup | void;
export declare const asyncPush: <E, A>(register: Register<E, A>) => EffectSource<never, E, A>;
export declare const async: <E, A>(register: Register<E, A>, bufferSize?: number) => EffectSource<never, E, A>;
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncEmitterPush
 */
export declare const asyncEmitterPush: <E, A>() => readonly [Emitter<E, A>, EffectSource<never, E, A>];
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncEmitter
 */
export declare const asyncEmitter: <E, A>(bufferSize?: number) => readonly [Emitter<E, A>, EffectSource<never, E, A>];
/**
 * @tsplus static callbag-effect-ts/Source.EffectSource.Ops asyncSink
 */
export declare const asyncSink: <E, A>() => readonly [EffectSink<never, E, never, A>, EffectSource<never, E, A>];
export {};
