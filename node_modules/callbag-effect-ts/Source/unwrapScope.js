import * as T from "@effect/io/Effect";
import * as CB from "strict-callbag-basics";
import { pipe, Signal } from "../Source.js";
import { left } from "@fp-ts/data/Either";
import { isFailure } from "@effect/io/Exit";
import { none } from "@effect/io/Fiber/Id";
export const unwrapScope = (mfa) => (r) => (_, sink) => {
    let cancel;
    let innerSub;
    sink(Signal.START, (signal) => {
        if (signal === Signal.DATA) {
            innerSub?.pull();
            cancel ??= pipe(mfa, T.flatMap((fa) => T.asyncInterrupt((resume) => {
                const sub = CB.subscribe(fa(r), {
                    onStart() {
                        sub.pull();
                    },
                    onData(data) {
                        sink(Signal.DATA, data);
                    },
                    onEnd(err) {
                        sink(Signal.END, err);
                        resume(T.unit());
                    },
                });
                sub.listen();
                innerSub = sub;
                return left(T.sync(() => {
                    sub.cancel();
                }));
            })), T.scoped, (a) => r.unsafeRunWith(a, (exit) => {
                if (isFailure(exit)) {
                    sink(Signal.END, exit.cause);
                }
            }));
        }
        else if (signal === Signal.END) {
            if (cancel)
                cancel(none)(() => { });
        }
    });
};
//# sourceMappingURL=unwrapScope.js.map