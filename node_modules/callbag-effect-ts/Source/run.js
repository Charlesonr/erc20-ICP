import * as T from "@effect/io/Effect";
import * as Either from "@fp-ts/data/Either";
import { Signal, pipe } from "../Source.js";
import { noop } from "../Sink.js";
export const run = (self, sink) => pipe(T.runtime(), T.flatMap((r) => T.asyncInterrupt((cb) => {
    const sinkWithEnv = sink(r);
    let aborted = false;
    let talkback;
    self(r)(Signal.START, (t, d) => {
        if (aborted) {
            if (t === Signal.START) {
                d(Signal.END);
            }
            return;
        }
        if (t === Signal.START) {
            talkback = d;
            sinkWithEnv(Signal.START, (signal, err) => {
                talkback(signal);
                if (err) {
                    aborted = true;
                    cb(T.failCause(err));
                }
            });
        }
        else if (t === Signal.DATA) {
            sinkWithEnv(Signal.DATA, d);
        }
        else if (t === Signal.END) {
            cb(d ? T.failCause(d) : T.unit());
        }
    });
    return Either.left(T.sync(() => {
        aborted = true;
        talkback?.(Signal.END);
    }));
})));
export const runDrain = (self) => run(self, noop);
//# sourceMappingURL=run.js.map