import * as Cause from "@effect/io/Cause";
import { Exit } from "@effect/io/Exit";
import type { Sink } from "strict-callbag-basics";
import { EffectSink } from "../Sink.js";
export interface Emitter<E, A> {
    data: (data: A) => void;
    fail: (error: E) => void;
    halt: (cause: Cause.Cause<E>) => void;
    done: (exit: Exit<E, A>) => void;
    end: () => void;
}
export declare const emitter: <E, A>(sink: Sink<A, Cause.Cause<E>, any>) => Emitter<E, A>;
/**
 * Returns an emitter for an `EffectSink` that does not use the environment.
 */
export declare const emitterUnknown: <E, A>(sink: EffectSink<unknown, E, never, A>) => Emitter<E, A>;
