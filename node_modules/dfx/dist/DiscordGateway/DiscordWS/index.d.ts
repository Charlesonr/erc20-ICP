/// <reference types="node" resolution-mode="require"/>
/// <reference types="ws" />
import { Discord, EffectSource } from "dfx/common";
import { WS } from "dfx/common-gateway";
import WebSocket from "isomorphic-ws";
export type Message = Discord.GatewayPayload | WS.Reconnect;
export interface OpenOpts {
    url?: string;
    version?: number;
    encoding?: DiscordWSCodec;
}
export interface DiscordWSCodec {
    type: "json" | "etf";
    encode: (p: Discord.GatewayPayload) => string | Buffer | ArrayBuffer;
    decode: (p: WebSocket.RawData) => Discord.GatewayPayload;
}
export declare const DiscordWSCodec: import("../../common.js").Tag<DiscordWSCodec>;
export declare const LiveJsonDiscordWSCodec: import("../../common.js").Layer<never, never, DiscordWSCodec>;
export declare const make: ({ url, version, }?: OpenOpts) => import("../../common.js").Effect<import("../../Log/index.js").Log | DiscordWSCodec, never, {
    source: import("callbag-effect-ts/Source").EffectSource<never, never, import("../../types.js").GatewayPayload<any>>;
    sink: import("callbag-effect-ts/Sink").EffectSink<never, never, never, Message>;
    setUrl: (url: string) => import("../../common.js").Effect<never, never, void>;
}>;
//# sourceMappingURL=index.d.ts.map