/// <reference types="node" resolution-mode="require"/>
/// <reference types="ws" />
import { Ref, EffectSource } from "dfx/common";
import WebSocket from "isomorphic-ws";
export declare const Reconnect: unique symbol;
export type Reconnect = typeof Reconnect;
export type Message = string | Buffer | ArrayBuffer | Reconnect;
export declare class WebSocketError {
    readonly reason: unknown;
    readonly _tag = "WebSocketError";
    constructor(reason: unknown);
}
export declare class WebSocketCloseError {
    readonly code: number;
    readonly reason: string;
    readonly _tag = "WebSocketCloseError";
    constructor(code: number, reason: string);
}
export declare class WebSocketWriteError {
    readonly reason: Error;
    readonly _tag = "WebSocketWriteError";
    constructor(reason: Error);
}
export declare const make: (url: Ref<string>, options?: WebSocket.ClientOptions) => import("../../common.js").Effect<import("../../Log/index.js").Log, never, {
    source: import("callbag-effect-ts/Source").EffectSource<never, WebSocketError | WebSocketCloseError | WebSocketWriteError, WebSocket.RawData>;
    sink: import("callbag-effect-ts/Sink").EffectSink<never, never, never, Message>;
}>;
//# sourceMappingURL=index.d.ts.map