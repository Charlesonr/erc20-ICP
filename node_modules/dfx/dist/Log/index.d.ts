declare const make: (debug?: boolean) => {
    info: (...args: any[]) => import("../common.js").Effect<never, never, void>;
    debug: (...args: any[]) => import("../common.js").Effect<never, never, void>;
};
export interface Log extends ReturnType<typeof make> {
}
export declare const Log: import("../common.js").Tag<Log>;
export declare const LiveLog: import("../common.js").Layer<never, never, Log>;
export declare const LiveLogDebug: import("../common.js").Layer<never, never, Log>;
export declare const info: (...args: any[]) => import("../common.js").Effect<Log, never, void>;
export declare const debug: (...args: any[]) => import("../common.js").Effect<Log, never, void>;
export {};
//# sourceMappingURL=index.d.ts.map