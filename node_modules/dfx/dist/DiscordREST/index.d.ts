import { Effect, Http } from "dfx/common";
import { Success } from "dfx/utils/effect";
import { ResponseWithData } from "./types.js";
declare const make: import("../common.js").Effect<import("../DiscordConfig/index.js").DiscordConfig | import("../Log/index.js").Log | import("dfx/RateLimitStore/index").RateLimitStore | import("dfx/RateLimitStore/index").RateLimiter, never, {
    request: <A = unknown>(path: string, init?: RequestInit) => import("../common.js").Effect<never, import("../Http/index.js").FetchError | import("../Http/index.js").StatusCodeError | import("../Http/index.js").JsonParseError, ResponseWithData<A>>;
}>;
export interface DiscordREST extends Success<typeof make> {
}
export declare const DiscordREST: import("../common.js").Tag<DiscordREST>;
export declare const LiveDiscordREST: import("../common.js").Layer<import("../DiscordConfig/index.js").DiscordConfig | import("../Log/index.js").Log | import("dfx/RateLimitStore/index").RateLimitStore | import("dfx/RateLimitStore/index").RateLimiter, never, DiscordREST>;
export declare const rest: import("../types.js").Endpoints<RequestInit>;
export {};
//# sourceMappingURL=index.d.ts.map