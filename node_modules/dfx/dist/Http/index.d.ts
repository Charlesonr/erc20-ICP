export declare class FetchError {
    readonly reason: unknown;
    readonly _tag = "FetchError";
    constructor(reason: unknown);
}
export declare class StatusCodeError {
    readonly response: Response;
    readonly _tag = "StatusCodeError";
    readonly code: number;
    constructor(response: Response);
}
export declare const request: (url: URL | string, init?: RequestInit) => import("../common.js").Effect<never, FetchError | StatusCodeError, Response>;
export declare class JsonParseError {
    readonly reason: unknown;
    readonly _tag = "JsonParseError";
    constructor(reason: unknown);
}
export declare const json: <A = unknown>(r: Response) => import("../common.js").Effect<never, JsonParseError, A>;
export declare class BlobError {
    readonly reason: unknown;
    readonly _tag = "BlobError";
    constructor(reason: unknown);
}
export declare const blob: (r: Response) => import("../common.js").Effect<never, BlobError, Blob>;
export declare const requestWithJson: <A = unknown>(url: URL | string, init?: RequestInit) => import("../common.js").Effect<never, FetchError | StatusCodeError, {
    response: Response;
    json: import("../common.js").Effect<never, JsonParseError, A>;
    blob: import("../common.js").Effect<never, BlobError, Blob>;
    text: import("../common.js").Effect<never, never, string>;
}>;
//# sourceMappingURL=index.d.ts.map