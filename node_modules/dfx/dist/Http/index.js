import * as tsplus_module_1 from "@effect/io/Effect";
import * as tsplus_module_2 from "@fp-ts/data/Either";
export class FetchError {
    reason;
    _tag = "FetchError";
    constructor(reason) {
        this.reason = reason;
    }
}
export class StatusCodeError {
    response;
    _tag = "StatusCodeError";
    code;
    constructor(response) {
        this.response = response;
        this.code = response.status;
    }
}
export const request = (url, init = {}) => tsplus_module_1.filterOrElseWith((r) => r.status < 300, (r) => tsplus_module_1.fail(new StatusCodeError(r)))(tsplus_module_1.asyncInterrupt((resume) => {
    const controller = new AbortController();
    fetch(url, {
        ...init,
        signal: controller.signal,
    })
        .then((a) => resume(tsplus_module_1.succeed(a)))
        .catch((e) => resume(tsplus_module_1.fail(new FetchError(e))));
    return tsplus_module_2.left(tsplus_module_1.sync(() => {
        controller.abort();
    }));
}));
export class JsonParseError {
    reason;
    _tag = "JsonParseError";
    constructor(reason) {
        this.reason = reason;
    }
}
export const json = (r) => tsplus_module_1.tryCatchPromise(() => r.json(), (reason) => new JsonParseError(reason));
export class BlobError {
    reason;
    _tag = "BlobError";
    constructor(reason) {
        this.reason = reason;
    }
}
export const blob = (r) => tsplus_module_1.tryCatchPromise(() => r.blob(), (reason) => new BlobError(reason));
export const requestWithJson = (url, init = {}) => tsplus_module_1.map((response) => ({
    response,
    json: json(response),
    blob: blob(response),
    text: tsplus_module_1.promise(() => response.text()),
}))(request(url, init));
//# sourceMappingURL=index.js.map