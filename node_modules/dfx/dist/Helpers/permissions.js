import * as tsplus_module_1 from "dfx/common";
import * as tsplus_module_2 from "@fp-ts/data/Function";
/**
 * A constant of all the permissions
 */
export const ALL = tsplus_module_1.Flags.all(tsplus_module_1.Discord.PermissionFlag);
/**
 * Check if a flag exists in the permissions.
 */
export const has = tsplus_module_1.Flags.hasBigInt;
/**
 * Convert a permissions bitfield to a list of flag names.
 */
export const toList = tsplus_module_1.Flags.toList(tsplus_module_1.Discord.PermissionFlag);
/**
 * Convert a list of flag names to a bitfield.
 */
export const fromList = tsplus_module_1.Flags.fromListBigint(tsplus_module_1.Discord.PermissionFlag);
/**
 * Reduce a list of roles to a bitfield of all the permissions added together.
 */
export const forRoles = (roles) => roles.reduce((permissions, role) => permissions | BigInt(role.permissions), BigInt(0));
/**
 * From a list of roles, calculate the permissions bitfield for the member.
 */
export const forMember = (roles) => (member) => tsplus_module_2.pipe(tsplus_module_1.Members.roles(roles)(member), forRoles);
const overwriteIsForMember = (guildId) => (member) => (overwrite) => {
    if (overwrite.type === 0) {
        return overwrite.id === guildId || member.roles.includes(overwrite.id);
    }
    return overwrite.id === member.user?.id;
};
const overwriteIsForRole = (guildId) => (role) => (overwrite) => {
    if (overwrite.type === 0) {
        return overwrite.id === guildId || overwrite.id === role.id;
    }
    return false;
};
/**
 * From a list of roles and a channel, calculate the permission bitfield for
 * the guild member or role for that channel.
 */
export const forChannel = (roles) => ({ guild_id, permission_overwrites: overwrites = [] }) => (memberOrRole) => {
    const hasAdmin = has(tsplus_module_1.Discord.PermissionFlag.ADMINISTRATOR);
    let basePermissions;
    let filteredOverwrites;
    if (tsplus_module_1.Members.is(memberOrRole)) {
        if (memberOrRole.permissions)
            return BigInt(memberOrRole.permissions);
        const memberRoles = tsplus_module_1.Members.roles(roles)(memberOrRole);
        basePermissions = forRoles(memberRoles);
        filteredOverwrites = overwrites.filter(overwriteIsForMember(guild_id)(memberOrRole));
    }
    else {
        const everyone = roles.find((role) => role.name === "@everyone");
        basePermissions =
            BigInt(everyone?.permissions || "0") | BigInt(memberOrRole.permissions);
        filteredOverwrites = overwrites.filter(overwriteIsForRole(guild_id)(memberOrRole));
    }
    if (hasAdmin(basePermissions)) {
        return ALL;
    }
    return applyOverwrites(basePermissions)(filteredOverwrites);
};
/**
 * Apply permission overwrites to a bitfield.
 */
export const applyOverwrites = (permissions) => (overwrites) => overwrites.reduce((permissions, overwrite) => (permissions & ~BigInt(overwrite.deny)) | BigInt(overwrite.allow), permissions);
//# sourceMappingURL=permissions.js.map