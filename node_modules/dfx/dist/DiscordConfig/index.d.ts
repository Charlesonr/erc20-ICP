import { Duration, Discord } from "dfx/common";
export interface DiscordConfig {
    token: string;
    rest: {
        baseUrl: string;
        globalRateLimit: {
            limit: number;
            window: Duration;
        };
    };
    gateway: {
        intents: number;
        presence?: Discord.UpdatePresence;
        shardCount?: number;
        identifyRateLimit: readonly [window: number, limit: number];
    };
}
export declare const DiscordConfig: import("../common.js").Tag<DiscordConfig>;
export interface MakeOpts {
    token: string;
    rest?: Partial<DiscordConfig["rest"]>;
    gateway?: Partial<DiscordConfig["gateway"]>;
}
export declare const make: ({ token, rest, gateway }: MakeOpts) => DiscordConfig;
export declare const makeLayer: (a_0: MakeOpts) => import("../common.js").Layer<never, never, DiscordConfig>;
export declare const token: import("../common.js").Effect<DiscordConfig, never, string>;
export declare const rest: import("../common.js").Effect<DiscordConfig, never, {
    baseUrl: string;
    globalRateLimit: {
        limit: number;
        window: Duration;
    };
}>;
export declare const gateway: import("../common.js").Effect<DiscordConfig, never, {
    intents: number;
    presence?: import("../types.js").UpdatePresence | undefined;
    shardCount?: number | undefined;
    identifyRateLimit: readonly [window: number, limit: number];
}>;
//# sourceMappingURL=index.d.ts.map