import * as tsplus_module_1 from "dfx/common";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "@fp-ts/data/Option";
import * as tsplus_module_4 from "@fp-ts/data/Function";
import * as tsplus_module_5 from "@fp-ts/data/Chunk";
import * as Ctx from "./context.js";
import * as Arr from "@fp-ts/data/ReadonlyArray";
import { splitDefinitions } from "./utils.js";
export class InteractionNotFound {
    interaction;
    _tag = "InteractionNotFound";
    constructor(interaction) {
        this.interaction = interaction;
    }
}
export const handlers = (definitions) => {
    const { Commands, Autocomplete, MessageComponent, ModalSubmit } = splitDefinitions(definitions);
    return {
        [tsplus_module_1.Discord.InteractionType.PING]: () => tsplus_module_2.asSome(tsplus_module_2.succeed({
            type: tsplus_module_1.Discord.InteractionCallbackType.PONG,
        })),
        [tsplus_module_1.Discord.InteractionType.APPLICATION_COMMAND]: (i) => {
            const data = i.data;
            return tsplus_module_4.pipe(tsplus_module_3.match(() => tsplus_module_2.fail(new InteractionNotFound(i)), (command) => command.handle)(tsplus_module_3.fromNullable(Commands[data.name])), tsplus_module_2.provideService(Ctx.InteractionContext)(i), tsplus_module_2.provideService(Ctx.ApplicationCommandContext)(data));
        },
        [tsplus_module_1.Discord.InteractionType.MODAL_SUBMIT]: (i) => {
            const data = i.data;
            return tsplus_module_4.pipe(ModalSubmit, Arr.map((a) => tsplus_module_2.struct({
                command: tsplus_module_2.succeed(a),
                match: a.predicate(data.custom_id),
            })), (a) => tsplus_module_2.flatMap((a) => tsplus_module_3.match(() => tsplus_module_2.fail(new InteractionNotFound(i)), (a) => a.command.handle)(tsplus_module_5.findFirst((a) => a.match)(a)))(tsplus_module_2.collectAllPar(a)), tsplus_module_2.provideService(Ctx.InteractionContext)(i), tsplus_module_2.provideService(Ctx.ModalSubmitContext)(data));
        },
        [tsplus_module_1.Discord.InteractionType.MESSAGE_COMPONENT]: (i) => {
            const data = i.data;
            return tsplus_module_4.pipe(MessageComponent, Arr.map((a) => tsplus_module_2.struct({
                command: tsplus_module_2.succeed(a),
                match: a.predicate(data.custom_id),
            })), (a) => tsplus_module_2.flatMap((a) => tsplus_module_3.match(() => tsplus_module_2.fail(new InteractionNotFound(i)), (a) => a.command.handle)(tsplus_module_5.findFirst((a) => a.match)(a)))(tsplus_module_2.collectAllPar(a)), tsplus_module_2.provideService(Ctx.InteractionContext)(i), tsplus_module_2.provideService(Ctx.MessageComponentContext)(data));
        },
        [tsplus_module_1.Discord.InteractionType.APPLICATION_COMMAND_AUTOCOMPLETE]: (i) => {
            const data = i.data;
            return tsplus_module_3.getOrElse(() => tsplus_module_2.fail(new InteractionNotFound(i)))(tsplus_module_3.map((focusedOption) => tsplus_module_4.pipe(Autocomplete, Arr.map((a) => tsplus_module_2.struct({
                command: tsplus_module_2.succeed(a),
                match: a.predicate(focusedOption),
            })), (a) => tsplus_module_2.flatMap((a) => tsplus_module_3.match(() => tsplus_module_2.fail(new InteractionNotFound(i)), (a) => a.command.handle)(tsplus_module_5.findFirst((a) => a.match)(a)))(tsplus_module_2.collectAllPar(a)), tsplus_module_2.provideService(Ctx.InteractionContext)(i), tsplus_module_2.provideService(Ctx.ApplicationCommandContext)(data), tsplus_module_2.provideService(Ctx.FocusedOptionContext)({ focusedOption })))(tsplus_module_1.IxHelpers.focusedOption(data)));
        },
    };
};
//# sourceMappingURL=handlers.js.map