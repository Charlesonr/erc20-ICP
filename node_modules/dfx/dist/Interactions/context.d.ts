import { Discord, Effect, Maybe } from "dfx/common";
import { InteractionResponse } from "./definitions.js";
export declare const InteractionContext: import("../common.js").Tag<import("../types.js").Interaction>;
export declare const ApplicationCommandContext: import("../common.js").Tag<import("../types.js").ApplicationCommandDatum>;
export declare const MessageComponentContext: import("../common.js").Tag<import("../types.js").MessageComponentDatum>;
export declare const ModalSubmitContext: import("../common.js").Tag<import("../types.js").ModalSubmitDatum>;
export interface FocusedOptionContext {
    readonly focusedOption: Discord.ApplicationCommandInteractionDataOption;
}
export declare const FocusedOptionContext: import("../common.js").Tag<FocusedOptionContext>;
export interface SubCommandContext {
    readonly command: Discord.ApplicationCommandInteractionDataOption;
}
export declare const SubCommandContext: import("../common.js").Tag<SubCommandContext>;
export declare const getCommand: import("../common.js").Effect<import("../types.js").ApplicationCommandDatum, never, import("../types.js").ApplicationCommandDatum>;
export declare class ResolvedDataNotFound {
    readonly data: Discord.ApplicationCommandDatum;
    readonly name: string;
    readonly _tag = "ResolvedDataNotFound";
    constructor(data: Discord.ApplicationCommandDatum, name: string);
}
export declare const getResolved: <A>(name: string, f: (id: Discord.Snowflake, data: Discord.ResolvedDatum) => A | undefined) => import("../common.js").Effect<import("../types.js").ApplicationCommandDatum, ResolvedDataNotFound, A>;
export declare const focusedOptionValue: import("../common.js").Effect<FocusedOptionContext, never, string>;
export declare const commandOptionsMap: import("../common.js").Effect<import("../types.js").ApplicationCommandDatum, never, Record<string, string | undefined>>;
export declare const handleSubCommands: <NER extends Record<string, import("../common.js").Effect<any, any, import("../common.js").Maybe<InteractionResponse>>>>(commands: NER) => import("../common.js").Effect<import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum | Exclude<[NER[keyof NER]] extends [{
    [EffectTypeId]: {
        _R: (_: never) => infer R;
    };
}] ? R : never, SubCommandContext>, [NER[keyof NER]] extends [{
    [EffectTypeId]: {
        _E: (_: never) => infer E;
    };
}] ? E : never, import("../common.js").Maybe<InteractionResponse>>;
export declare const getSubCommand: import("../common.js").Effect<SubCommandContext, never, import("../types.js").ApplicationCommandInteractionDataOption>;
export declare const subCommandOptionsMap: import("../common.js").Effect<SubCommandContext, never, Record<string, string | undefined>>;
export declare const modalValues: import("../common.js").Effect<import("../types.js").ModalSubmitDatum, never, Record<string, string | undefined>>;
//# sourceMappingURL=context.d.ts.map