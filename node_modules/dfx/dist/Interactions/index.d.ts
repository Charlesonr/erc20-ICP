import { Rest, Discord } from "dfx/common";
import * as D from "./definitions.js";
export * from "./context.js";
export { global, guild, messageComponent, modalSubmit, autocomplete, InteractionDefinition, InteractionResponse, } from "./definitions.js";
export { makeConfigLayer as makeWebhookConfig, makeHandler as makeWebhookHandler, MakeConfigOpts as MakeWebhookConfigOpts, WebhookConfig, WebhookParseError, BadWebhookSignature, } from "./webhook.js";
export declare class InteractionBuilder<R, E> {
    readonly definitions: D.InteractionDefinition<R, E>[];
    constructor(definitions: D.InteractionDefinition<R, E>[]);
    add<R1, E1>(definition: D.InteractionDefinition<R1, E1>): InteractionBuilder<R | R1, E | E1>;
    get syncGlobal(): import("../common.js").Effect<import("../index.js").DiscordREST, import("../Http/index.js").FetchError | import("../Http/index.js").StatusCodeError | import("../Http/index.js").JsonParseError, import("../DiscordREST/types.js").ResponseWithData<import("../types.js").ApplicationCommand[]>>;
    syncGuild(appId: Discord.Snowflake, guildId: Discord.Snowflake): import("../DiscordREST/types.js").RestResponse<import("../types.js").ApplicationCommand[]>;
}
export declare const builder: InteractionBuilder<never, never>;
export declare const id: (query: string) => (customId: string) => import("../common.js").Effect<never, never, boolean>;
export declare const idStartsWith: (query: string) => (customId: string) => import("../common.js").Effect<never, never, boolean>;
export declare const regex: (query: RegExp) => (customId: string) => import("../common.js").Effect<never, never, boolean>;
export declare const option: (name: string) => (focusedOption: Discord.ApplicationCommandInteractionDataOption) => import("../common.js").Effect<never, never, boolean>;
//# sourceMappingURL=index.d.ts.map