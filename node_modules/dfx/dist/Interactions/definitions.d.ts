import { Discord, Effect, Maybe } from "dfx/common";
export type InteractionResponse = {
    type: Discord.InteractionCallbackType.CHANNEL_MESSAGE_WITH_SOURCE;
    data: Discord.InteractionCallbackMessage;
} | {
    type: Discord.InteractionCallbackType.UPDATE_MESSAGE;
    data: Discord.InteractionCallbackMessage;
} | {
    type: Discord.InteractionCallbackType.MODAL;
    data: Discord.InteractionCallbackModal;
} | {
    type: Discord.InteractionCallbackType.DEFERRED_UPDATE_MESSAGE;
} | {
    type: Discord.InteractionCallbackType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE;
} | {
    type: Discord.InteractionCallbackType.APPLICATION_COMMAND_AUTOCOMPLETE_RESULT;
    data: Discord.InteractionCallbackAutocomplete;
};
type DescriptionMissing<A> = A extends {
    type: Exclude<Discord.ApplicationCommandType, 1>;
} ? false : A extends {
    description: string;
} ? false : true;
export type InteractionDefinition<R, E> = GlobalApplicationCommand<R, E> | GuildApplicationCommand<R, E> | MessageComponent<R, E> | ModalSubmit<R, E> | Autocomplete<R, E>;
export declare class GlobalApplicationCommand<R, E> {
    readonly command: Discord.CreateGlobalApplicationCommandParams;
    readonly handle: Effect<R, E, Maybe<InteractionResponse>>;
    readonly _tag = "GlobalApplicationCommand";
    constructor(command: Discord.CreateGlobalApplicationCommandParams, handle: Effect<R, E, Maybe<InteractionResponse>>);
}
export declare const global: <R, E, A extends import("../types.js").CreateGlobalApplicationCommandParams>(command: A, handle: DescriptionMissing<A> extends true ? "command description is missing" : import("../common.js").Effect<R, E, import("../common.js").Maybe<InteractionResponse>>) => GlobalApplicationCommand<Exclude<R, import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum>, E>;
export declare class GuildApplicationCommand<R, E> {
    readonly command: Discord.CreateGuildApplicationCommandParams;
    readonly handle: Effect<R, E, Maybe<InteractionResponse>>;
    readonly _tag = "GuildApplicationCommand";
    constructor(command: Discord.CreateGuildApplicationCommandParams, handle: Effect<R, E, Maybe<InteractionResponse>>);
}
export declare const guild: <R, E, A extends import("../types.js").CreateGuildApplicationCommandParams>(command: A, handle: DescriptionMissing<A> extends true ? "command description is missing" : import("../common.js").Effect<R, E, import("../common.js").Maybe<InteractionResponse>>) => GuildApplicationCommand<Exclude<R, import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum>, E>;
export declare class MessageComponent<R, E> {
    readonly predicate: (customId: string) => Effect<R, E, boolean>;
    readonly handle: Effect<R, E, Maybe<InteractionResponse>>;
    readonly _tag = "MessageComponent";
    constructor(predicate: (customId: string) => Effect<R, E, boolean>, handle: Effect<R, E, Maybe<InteractionResponse>>);
}
export declare const messageComponent: <R1, R2, E1, E2>(pred: (customId: string) => import("../common.js").Effect<R1, E1, boolean>, handle: import("../common.js").Effect<R2, E2, import("../common.js").Maybe<InteractionResponse>>) => MessageComponent<Exclude<R1, import("../types.js").Interaction | import("../types.js").MessageComponentDatum> | Exclude<R2, import("../types.js").Interaction | import("../types.js").MessageComponentDatum>, E1 | E2>;
export declare class ModalSubmit<R, E> {
    readonly predicate: (customId: string) => Effect<R, E, boolean>;
    readonly handle: Effect<R, E, Maybe<InteractionResponse>>;
    readonly _tag = "ModalSubmit";
    constructor(predicate: (customId: string) => Effect<R, E, boolean>, handle: Effect<R, E, Maybe<InteractionResponse>>);
}
export declare const modalSubmit: <R1, R2, E1, E2>(pred: (customId: string) => import("../common.js").Effect<R1, E1, boolean>, handle: import("../common.js").Effect<R2, E2, import("../common.js").Maybe<InteractionResponse>>) => ModalSubmit<Exclude<R1, import("../types.js").Interaction | import("../types.js").ModalSubmitDatum> | Exclude<R2, import("../types.js").Interaction | import("../types.js").ModalSubmitDatum>, E1 | E2>;
export declare class Autocomplete<R, E> {
    readonly predicate: (focusedOption: Discord.ApplicationCommandInteractionDataOption) => Effect<R, E, boolean>;
    readonly handle: Effect<R, E, Maybe<InteractionResponse>>;
    readonly _tag = "Autocomplete";
    constructor(predicate: (focusedOption: Discord.ApplicationCommandInteractionDataOption) => Effect<R, E, boolean>, handle: Effect<R, E, Maybe<InteractionResponse>>);
}
export declare const autocomplete: <R1, R2, E1, E2>(pred: (focusedOption: Discord.ApplicationCommandInteractionDataOption) => import("../common.js").Effect<R1, E1, boolean>, handle: import("../common.js").Effect<R2, E2, import("../common.js").Maybe<InteractionResponse>>) => Autocomplete<Exclude<R1, import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum | import("../types.js").ApplicationCommandInteractionDataOption> | Exclude<R2, import("../types.js").Interaction | import("../types.js").ApplicationCommandDatum | import("../types.js").ApplicationCommandInteractionDataOption>, E1 | E2>;
export {};
//# sourceMappingURL=definitions.d.ts.map