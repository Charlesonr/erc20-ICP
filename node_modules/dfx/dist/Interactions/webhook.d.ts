import { Discord, Effect, Cause } from "dfx/common";
import { InteractionBuilder } from "./index.js";
export declare class BadWebhookSignature {
    readonly _tag = "BadWebhookSignature";
}
export type Headers = Record<string, string | string[] | undefined>;
export interface MakeConfigOpts {
    applicationId: string;
    publicKey: string;
}
declare const makeConfig: ({ applicationId, publicKey }: MakeConfigOpts) => {
    applicationId: string;
    publicKey: Uint8Array;
};
export interface WebhookConfig extends ReturnType<typeof makeConfig> {
}
export declare const WebhookConfig: import("../common.js").Tag<WebhookConfig>;
export declare const makeConfigLayer: (a_0: MakeConfigOpts) => import("../common.js").Layer<never, never, WebhookConfig>;
export declare class WebhookParseError {
    readonly reason: unknown;
    readonly _tag = "WebhookParseError";
    constructor(reason: unknown);
}
export interface HandleWebhookOpts<E> {
    headers: Headers;
    body: string;
    success: (a: Discord.InteractionResponse) => Effect<never, never, void>;
    error: (e: Cause<E>) => Effect<never, never, void>;
    empty: Effect<never, never, void>;
}
export declare const makeHandler: <R, E>(ix: InteractionBuilder<R, E>) => ({ headers, body, success, empty, error, }: HandleWebhookOpts<BadWebhookSignature | WebhookParseError | E>) => import("../common.js").Effect<WebhookConfig | R, never, void>;
export {};
//# sourceMappingURL=webhook.d.ts.map