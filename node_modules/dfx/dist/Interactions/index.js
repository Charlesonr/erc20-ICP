import * as tsplus_module_1 from "dfx/common";
import * as tsplus_module_2 from "@effect/io/Effect";
export * from "./context.js";
export { global, guild, messageComponent, modalSubmit, autocomplete, } from "./definitions.js";
export { makeConfigLayer as makeWebhookConfig, makeHandler as makeWebhookHandler, WebhookConfig, WebhookParseError, BadWebhookSignature, } from "./webhook.js";
export class InteractionBuilder {
    definitions;
    constructor(definitions) {
        this.definitions = definitions;
    }
    add(definition) {
        return new InteractionBuilder([
            ...this.definitions,
            definition,
        ]);
    }
    get syncGlobal() {
        const commands = this.definitions
            .filter((c) => c._tag === "GlobalApplicationCommand")
            .map((c) => c.command);
        return tsplus_module_2.flatMap((app) => tsplus_module_1.Rest.rest.bulkOverwriteGlobalApplicationCommands(app.id, {
            body: JSON.stringify(commands),
        }))(tsplus_module_2.flatMap((r) => r.json)(tsplus_module_1.Rest.rest
            .getCurrentBotApplicationInformation()));
    }
    syncGuild(appId, guildId) {
        const commands = this.definitions
            .filter((c) => c._tag === "GuildApplicationCommand")
            .map((c) => c.command);
        return tsplus_module_1.Rest.rest.bulkOverwriteGuildApplicationCommands(appId, guildId, commands);
    }
}
export const builder = new InteractionBuilder([]);
// Filters
export const id = (query) => (customId) => tsplus_module_2.succeed(query === customId);
export const idStartsWith = (query) => (customId) => tsplus_module_2.succeed(customId.startsWith(query));
export const regex = (query) => (customId) => tsplus_module_2.succeed(query.test(customId));
export const option = (name) => (focusedOption) => tsplus_module_2.succeed(focusedOption.name === name);
//# sourceMappingURL=index.js.map