import * as tsplus_module_1 from "dfx/common";
import * as tsplus_module_2 from "@effect/io/Effect";
import * as tsplus_module_3 from "@fp-ts/data/Option";
import * as tsplus_module_4 from "@fp-ts/data/Function";
import { InteractionNotFound } from "./handlers.js";
import * as Arr from "@fp-ts/data/ReadonlyArray";
import { optionsMap } from "dfx/Helpers/interactions";
export const InteractionContext = tsplus_module_1.Tag();
export const ApplicationCommandContext = tsplus_module_1.Tag();
export const MessageComponentContext = tsplus_module_1.Tag();
export const ModalSubmitContext = tsplus_module_1.Tag();
export const FocusedOptionContext = tsplus_module_1.Tag();
export const SubCommandContext = tsplus_module_1.Tag();
export const getCommand = tsplus_module_2.service(ApplicationCommandContext);
export class ResolvedDataNotFound {
    data;
    name;
    _tag = "ResolvedDataNotFound";
    constructor(data, name) {
        this.data = data;
        this.name = name;
    }
}
export const getResolved = (name, f) => tsplus_module_2.serviceWithEffect(ApplicationCommandContext)((a) => tsplus_module_3.match(() => tsplus_module_2.fail(new ResolvedDataNotFound(a, name)), tsplus_module_2.succeed)(tsplus_module_1.IxHelpers.resolveOptionValue(name, f)(a)));
export const focusedOptionValue = tsplus_module_2.serviceWith(FocusedOptionContext)((a) => a.focusedOption.value ?? "");
export const commandOptionsMap = tsplus_module_2.serviceWith(ApplicationCommandContext)(optionsMap);
export const handleSubCommands = (commands) => tsplus_module_2.flatMap(({ interaction, data }) => tsplus_module_4.pipe(tsplus_module_1.IxHelpers.allSubCommands(data), Arr.findFirst((a) => !!commands[a.name]), (o) => tsplus_module_3.toEither(() => new InteractionNotFound(interaction))(o), tsplus_module_2.fromEither, (a) => tsplus_module_2.flatMap((command) => tsplus_module_4.pipe(commands[command.name], tsplus_module_2.provideService(SubCommandContext)({ command })))(a)))(tsplus_module_2.struct({
    interaction: tsplus_module_2.service(InteractionContext),
    data: tsplus_module_2.service(ApplicationCommandContext),
}));
export const getSubCommand = tsplus_module_2.serviceWith(SubCommandContext)((a) => a.command);
export const subCommandOptionsMap = tsplus_module_2.map(tsplus_module_1.IxHelpers.optionsMap)(getSubCommand);
export const modalValues = tsplus_module_2.serviceWith(ModalSubmitContext)(tsplus_module_1.IxHelpers.componentsMap);
//# sourceMappingURL=context.js.map