import { Source } from "strict-callbag";
interface NodeishEmitter {
    addListener(eventName: string, listener: (...args: any[]) => unknown): unknown;
    removeListener(eventName: string, listener: (...args: any[]) => unknown): unknown;
}
interface DomishEmitter {
    addEventListener(eventName: string, listener: (...args: any[]) => unknown, options?: unknown): unknown;
    removeEventListener(eventName: string, listener: (...args: any[]) => unknown): unknown;
}
type Emitter = NodeishEmitter | DomishEmitter;
export declare const fromEventP: <A = unknown>(self: Emitter, event: string, options?: unknown) => Source<A, never>;
export declare const fromEvent: <A = unknown>(self: Emitter, event: string, bufferSize?: number, options?: unknown) => Source<A, never>;
export {};
