import { subscribe } from "./subscribe.js";
export function reduce_(...args) {
    return new Promise((resolve, reject) => {
        const hasInitialValue = args.length === 3;
        const [self, reducer] = args;
        let [, , accumulator] = args;
        let index = 0;
        const sub = subscribe(self, {
            onStart() {
                sub.pull();
            },
            onData(data) {
                if (index === 0 && !hasInitialValue) {
                    accumulator = data;
                    index++;
                }
                else {
                    accumulator = reducer(accumulator, data, index++);
                }
                sub.pull();
            },
            onEnd(err) {
                if (err) {
                    reject(err);
                }
                else if (!hasInitialValue && index === 0) {
                    reject(new TypeError("Reduce of empty source with no initial value"));
                }
                else {
                    resolve(accumulator);
                }
            },
        });
        sub.listen();
    });
}
export function reduce(...args) {
    return (self) => {
        return reduce_(self, ...args);
    };
}
