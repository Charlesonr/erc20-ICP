import { subscribe } from "../subscribe.js";
export const make = (onData, onEnd, onChildEnd, onFailedPull) => {
    let parentEnded = false;
    let parentError;
    const subscriptions = new Set();
    const pullQueue = new Set();
    const add = (source) => {
        const sub = subscribe(source, {
            onStart() {
                sub.pull();
            },
            onData(data) {
                pullQueue.add(sub);
                onData(data);
            },
            onEnd(err) {
                if (err !== undefined) {
                    error(err, sub);
                }
                else {
                    endSubscription(sub);
                }
            },
        });
        subscriptions.add(sub);
        sub.listen();
    };
    const endSubscription = (sub) => {
        subscriptions.delete(sub);
        pullQueue.delete(sub);
        if (subscriptions.size === 0 && parentEnded) {
            onEnd(parentError);
        }
        else {
            onChildEnd();
            if (sub.waiting()) {
                pull();
            }
        }
    };
    const end = (err) => {
        parentEnded = true;
        parentError = err;
        if (!subscriptions.size) {
            onEnd();
        }
    };
    const abort = (from) => {
        // eslint-disable-next-line
        subscriptions.forEach((sub) => from !== sub && sub.cancel());
        subscriptions.clear();
        pullQueue.clear();
    };
    const error = (err, sub) => {
        abort(sub);
        onEnd(err, sub);
    };
    const pull = () => {
        if (pullQueue.size === 0) {
            onFailedPull?.();
            return;
        }
        const [head] = pullQueue;
        pullQueue.delete(head);
        head.pull();
    };
    return {
        pull,
        add,
        end,
        abort,
        size: () => subscriptions.size,
    };
};
