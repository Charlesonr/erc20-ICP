import { Source } from "strict-callbag";
/**
 * Calls the specified callback function for all the elements. The return value
 * of the callback function is the accumulated result, and is provided as an
 * argument in the next call to the callback function.
 * @param reducer A function that accepts up to three arguments. The reduce
 * method calls the reducer function one time for each element.
 * @see
 *  - {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce Array.reduce}
 */
export declare function reduce_<A>(self: Source<A, any>, reducer: (previousValue: A, item: A, index: number) => A): Promise<A>;
/**
 * Calls the specified callback function for all the elements. The return value
 * of the callback function is the accumulated result, and is provided as an
 * argument in the next call to the callback function.
 * @param reducer A function that accepts up to three arguments. The reduce
 * method calls the reducer function one time for each element.
 * @param initialValue If initialValue is specified, it is used as the initial
 * value to start the accumulation. The first call to the reducer function
 * provides this value as an argument instead of a value.
 * @see
 *  - {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce Array.reduce}
 */
export declare function reduce_<A, Acc>(self: Source<A, any>, reducer: (previousValue: Acc, item: A, index: number) => Acc, initialValue: Acc): Promise<Acc>;
/**
 * Calls the specified callback function for all the elements. The return value
 * of the callback function is the accumulated result, and is provided as an
 * argument in the next call to the callback function.
 * @param reducer A function that accepts up to three arguments. The reduce
 * method calls the reducer function one time for each element.
 * @see
 *  - {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce Array.reduce}
 */
export declare function reduce<A>(reducer: (acc: A, item: A, index: number) => A): (self: Source<A, any>) => Promise<A>;
/**
 * Calls the specified callback function for all the elements. The return value
 * of the callback function is the accumulated result, and is provided as an
 * argument in the next call to the callback function.
 * @param reducer A function that accepts up to three arguments. The reduce
 * method calls the reducer function one time for each element.
 * @param initialValue If initialValue is specified, it is used as the initial
 * value to start the accumulation. The first call to the reducer function
 * provides this value as an argument instead of a value.
 * @see
 *  - {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce Array.reduce}
 */
export declare function reduce<A, Acc = A>(reducer: (previousValue: Acc, item: A, index: number) => Acc, initialValue: Acc): (self: Source<A, any>) => Promise<Acc>;
