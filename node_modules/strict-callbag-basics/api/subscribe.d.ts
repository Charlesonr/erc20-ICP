import { Source, Talkback } from "strict-callbag";
interface Callbacks<A, E> {
    onStart: (this: void) => void;
    onData: (this: void, data: A) => void;
    onEnd: (this: void, err?: E) => void;
    talkbackOverride?: (original: Talkback<any>) => Talkback<any>;
}
export declare class Subscription {
    private source;
    private callbacks;
    private aborted;
    private pullPending;
    private talkback;
    private onCancel;
    private waitingForData;
    constructor(source: Source<any>, callbacks: Callbacks<any, any>);
    listen(): void;
    cancel(cb?: () => void): void;
    pull(): void;
    waiting(): boolean;
}
export declare const subscribe: <A, E>(source: Source<A, E>, callbacks: Callbacks<A, E>) => Subscription;
export {};
