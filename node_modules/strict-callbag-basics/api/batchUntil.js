import { createPipe } from "./createPipe.js";
export const batchUntil_ = (self, predicate, inclusive = false) => (_, sink) => {
    let buffer = [];
    createPipe(self, sink, {
        onStart(s) {
            s.pull();
        },
        onRequest(s) {
            s.pull();
        },
        onData(s, data) {
            if (predicate(data) && (inclusive || buffer.length > 0)) {
                if (inclusive) {
                    buffer.push(data);
                    sink(1, buffer);
                    buffer = [];
                }
                else {
                    sink(1, buffer);
                    buffer = [data];
                }
            }
            else {
                buffer.push(data);
                s.pull();
            }
        },
        onEnd(err) {
            if (buffer.length > 0) {
                sink(1, buffer);
                buffer = [];
            }
            sink(2, err);
        },
        onAbort() {
            buffer = [];
        },
    });
};
export const batchUntil = (predicate, inclusive) => (self) => batchUntil_(self, predicate, inclusive);
