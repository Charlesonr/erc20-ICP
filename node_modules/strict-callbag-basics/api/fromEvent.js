import { asyncP } from "./async.js";
import { buffer_ } from "./buffer.js";
export const fromEventP = (self, event, options) => asyncP((sink) => {
    const onData = (a) => sink(1, a);
    if ("addListener" in self) {
        self.addListener(event, onData);
    }
    else if ("addEventListener" in self) {
        self.addEventListener(event, onData, options);
    }
    else {
        throw new Error("fromEvent: not a valid event emitter");
    }
    return () => {
        if ("removeListener" in self) {
            self.removeListener(event, onData);
        }
        else {
            self.removeEventListener(event, onData);
        }
    };
});
export const fromEvent = (self, event, bufferSize = 16, options) => buffer_(fromEventP(self, event, options), bufferSize);
