import { createPipe } from "./createPipe.js";
import { NONE } from "./none.js";
import { Queue } from "./_internal/queue.js";
/**
 * Converts any type of stream into a pull based one.
 *
 * `bufferSize` configures the amount of items to keep in the queue
 */
export const buffer_ = (self, bufferSize = 16, eager = false) => (_, sink) => {
    let sourceEnded = false;
    let sourceError;
    let waitingForData = false;
    const buffer = new Queue(bufferSize === Infinity ? undefined : bufferSize);
    function cleanup() {
        buffer.clear();
    }
    function maybeEnd() {
        if (sourceEnded && buffer.size === 0) {
            sink(2, sourceError);
        }
    }
    createPipe(self, sink, {
        onStart(s) {
            waitingForData = true;
            s.pull();
        },
        onRequest(s) {
            const next = buffer.shift();
            if (next === NONE) {
                maybeEnd();
                if (!sourceEnded && (!waitingForData || eager)) {
                    waitingForData = true;
                    s.pull();
                }
            }
            else {
                sink(1, next);
                if (eager) {
                    s.pull();
                }
            }
        },
        onData(_s, data) {
            if (waitingForData) {
                waitingForData = false;
                sink(1, data);
            }
            else {
                buffer.push(data);
            }
        },
        onEnd(err) {
            sourceEnded = true;
            sourceError = err;
            maybeEnd();
        },
        onAbort() {
            cleanup();
        },
    });
};
/**
 * Converts any type of stream into a pull based one.
 *
 * `bufferSize` configures the amount of items to keep in the queue
 */
export const buffer = (bufferSize, eager) => (self) => buffer_(self, bufferSize, eager);
