import { Sink, Source, Talkback } from "strict-callbag";
import { Subscription } from "./subscribe.js";
interface Callbacks<A, EI, EO> {
    onStart: (this: void, sub: Subscription) => void;
    onData: (this: void, sub: Subscription, data: A) => void;
    onEnd: (this: void, err?: EI) => void;
    onRequest: (this: void, sub: Subscription) => void;
    onAbort: (this: void, err?: EO) => void;
    talkbackOverride?: (this: void, original: Talkback<unknown>) => Talkback<unknown>;
}
/**
 * Helper for reducing boilerplate when creating operators
 */
export declare const createPipe: <A, EI, EO = never>(source: Source<A, EI>, sink: Sink<any, EI, EO>, { onStart, onData, onEnd, onRequest, onAbort, talkbackOverride, }: Callbacks<A, EI, EO>) => void;
export {};
