import { emitter } from "./emitter.js";
import { share } from "./share.js";
export const asyncP = (register) => (_, sink) => {
    let completed = false;
    let cleanup; // eslint-disable-line
    let talkback;
    const complete = () => {
        completed = true;
        cleanup?.();
    };
    sink(0, (t) => {
        talkback?.(t);
        if (t === 2) {
            complete();
        }
    });
    cleanup = register((signal, data) => {
        if (completed)
            throw new Error("sink ended");
        if (signal === 0) {
            talkback = data;
        }
        else if (signal === 1) {
            sink(1, data);
        }
        else if (signal === 2) {
            complete();
            sink(2, data);
        }
    });
    if (completed && cleanup) {
        cleanup();
    }
};
export const asyncSinkP = () => {
    let buffer = [];
    let completed = false;
    let completedError;
    let sink;
    let parentTalkback;
    const parentSink = (signal, data) => {
        if (completed)
            throw new Error("sink ended");
        if (signal === 0) {
            parentTalkback = data;
        }
        else if (signal === 1) {
            if (sink) {
                sink(1, data);
            }
            else {
                buffer.push(data);
            }
        }
        else if (signal === 2) {
            completed = true;
            completedError = data;
            sink?.(2, data);
        }
    };
    const source = (_, data) => {
        sink = data;
        sink(0, (signal) => {
            parentTalkback?.(signal);
            if (signal === 2) {
                sink = undefined;
            }
        });
        for (const item of buffer) {
            sink(1, item);
        }
        buffer = [];
        if (completed) {
            data(2, completedError);
            return;
        }
    };
    return [parentSink, share(source)];
};
export const asyncEmitterP = () => {
    const [sink, source] = asyncSinkP();
    return [emitter(sink), source];
};
