import symbol from "symbol-observable";
import { subscribe } from "./subscribe.js";
export const toObservable = (self) => {
    const sub = {
        subscribe(observer) {
            const s = subscribe(self, {
                onStart() {
                    s.pull();
                },
                onData(data) {
                    observer?.next?.(data);
                    s.pull();
                },
                onEnd(err) {
                    if (err) {
                        observer?.error?.(err);
                    }
                    else {
                        observer?.complete?.();
                    }
                },
            });
            s.listen();
            return {
                unsubscribe() {
                    s.cancel();
                },
            };
        },
    };
    return {
        [symbol]() {
            return sub;
        },
    };
};
export const toObservableWithPull = (self, initialPulls = 1) => {
    const subscriptions = new Set();
    const sub = {
        subscribe(observer) {
            let remainingPulls = initialPulls;
            const maybePull = () => {
                if (remainingPulls <= 0)
                    return;
                remainingPulls--;
                s.pull();
            };
            const s = subscribe(self, {
                onStart() {
                    maybePull();
                },
                onData(data) {
                    observer?.next?.(data);
                    maybePull();
                },
                onEnd(err) {
                    subscriptions.delete(s);
                    if (err) {
                        observer?.error?.(err);
                    }
                    else {
                        observer?.complete?.();
                    }
                },
            });
            subscriptions.add(s);
            s.listen();
            return {
                unsubscribe() {
                    subscriptions.delete(s);
                    s.cancel();
                },
            };
        },
    };
    return [
        {
            [symbol]() {
                return sub;
            },
        },
        () => subscriptions.forEach((s) => s.pull()),
    ];
};
