import { subscribe } from "./subscribe.js";
const NONE = Symbol();
export const zip_ = (self, other, { latest = false } = {}) => (_, sink) => {
    let dataA = NONE;
    let dataB = NONE;
    let endA = false;
    let endB = false;
    const maybeEmit = () => {
        if (dataA !== NONE && dataB !== NONE) {
            sink(1, [dataA, dataB]);
            if (!latest) {
                dataA = NONE;
                dataB = NONE;
                if (endA || endB) {
                    if (!endA)
                        subB.cancel();
                    if (!endB)
                        subA.cancel();
                    sink(2, undefined);
                }
            }
        }
    };
    const maybeEnd = () => {
        if (endA && endB) {
            sink(2, undefined);
        }
        else if (!latest && dataA === NONE && dataB === NONE) {
            sink(2, undefined);
        }
    };
    const subA = subscribe(self, {
        onStart() {
            subA.pull();
        },
        onData(data) {
            dataA = data;
            maybeEmit();
        },
        onEnd(err) {
            endA = true;
            if (err) {
                subB.cancel();
                sink(2, err);
            }
            else {
                maybeEnd();
            }
        },
    });
    const subB = subscribe(other, {
        onStart() {
            subB.pull();
        },
        onData(data) {
            dataB = data;
            maybeEmit();
        },
        onEnd(err) {
            endB = true;
            if (err) {
                subA.cancel();
                sink(2, err);
            }
            else {
                maybeEnd();
            }
        },
    });
    let started = false;
    sink(0, (signal) => {
        if (signal === 1) {
            if (!started) {
                started = true;
                subA.listen();
                subB.listen();
            }
            else {
                subA.pull();
                subB.pull();
            }
        }
        else if (signal === 2) {
            subA.cancel();
            subB.cancel();
        }
    });
};
export const zip = (other, opts) => (self) => zip_(self, other, opts);
