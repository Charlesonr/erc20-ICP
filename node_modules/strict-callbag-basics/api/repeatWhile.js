import { NONE } from "./none.js";
import { subscribe } from "./subscribe.js";
export const repeatWhile_ = (self, predicate) => (_, sink) => {
    let waitingForData = false;
    let subscription;
    const resubscribe = (index) => {
        let lastItem = NONE;
        const sub = subscribe(self, {
            onStart() {
                if (waitingForData) {
                    sub.pull();
                }
            },
            onData(data) {
                waitingForData = false;
                lastItem = data;
                sink(1, data);
            },
            onEnd(err) {
                if (err) {
                    sink(2, err);
                }
                else if (predicate(index, lastItem)) {
                    resubscribe(index + 1);
                    subscription.listen();
                }
                else {
                    sink(2, undefined);
                }
            },
        });
        subscription = sub;
    };
    sink(0, (signal) => {
        if (signal === 1) {
            waitingForData = true;
            if (!subscription) {
                resubscribe(0);
                subscription.listen();
            }
            else {
                subscription.pull();
            }
        }
        else if (signal === 2) {
            subscription.cancel();
        }
    });
};
export const repeatWhile = (predicate) => (self) => repeatWhile_(self, predicate);
