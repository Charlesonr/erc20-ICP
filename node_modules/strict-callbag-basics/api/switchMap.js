import { createPipe } from "./createPipe.js";
import { subscribe } from "./subscribe.js";
export const switchMap_ = (self, fab) => (_, sink) => {
    let innerSub;
    let sourceEnded = false;
    let sourceError;
    let waitingForData = true;
    createPipe(self, sink, {
        onStart(s) {
            s.pull();
        },
        onRequest(s) {
            waitingForData = true;
            if (innerSub) {
                innerSub.pull();
            }
            else {
                s.pull();
            }
        },
        onData(outerSub, data) {
            if (innerSub) {
                innerSub.cancel();
                innerSub = undefined;
            }
            const sub = subscribe(fab(data), {
                onStart() {
                    sub.pull();
                },
                onData(data) {
                    waitingForData = false;
                    sink(1, data);
                },
                onEnd(err) {
                    innerSub = undefined;
                    if (sourceEnded) {
                        sink(2, err ?? sourceError);
                        return;
                    }
                    if (err) {
                        outerSub.cancel();
                        sink(2, err);
                    }
                    else if (waitingForData) {
                        outerSub.pull();
                    }
                },
            });
            sub.listen();
            innerSub = sub;
        },
        onEnd(err) {
            sourceEnded = true;
            sourceError = err;
            if (!innerSub) {
                sink(2, err);
            }
        },
        onAbort() {
            innerSub?.cancel();
        },
    });
};
/**
 * @ets_data_first switchMap_
 */
export const switchMap = (fab) => (fa) => switchMap_(fa, fab);
