import { schedule } from "./_internal/schedule.js";
export class Subscription {
    source;
    callbacks;
    aborted = false;
    pullPending = false;
    talkback;
    onCancel;
    waitingForData = false;
    constructor(source, callbacks) {
        this.source = source;
        this.callbacks = callbacks;
    }
    listen() {
        this.source(0, (signal, data) => {
            if (this.aborted) {
                if (signal === 0) {
                    data(2);
                    this.onCancel?.();
                }
                return;
            }
            if (signal === 0) {
                this.talkback = this.callbacks.talkbackOverride
                    ? this.callbacks.talkbackOverride(data)
                    : data;
                if (this.pullPending) {
                    this.talkback(1); // eslint-disable-line
                }
                this.callbacks.onStart();
            }
            else if (signal === 1) {
                this.waitingForData = false;
                this.callbacks.onData(data);
            }
            else if (signal === 2) {
                this.aborted = true;
                schedule(() => this.callbacks.onEnd(data));
            }
        });
    }
    cancel(cb) {
        if (this.aborted)
            return;
        this.aborted = true;
        this.onCancel = cb;
        if (this.talkback) {
            this.talkback(2);
            this.onCancel?.();
        }
    }
    pull() {
        if (this.aborted)
            return;
        this.waitingForData = true;
        if (this.talkback) {
            this.talkback(1);
        }
        else {
            this.pullPending = true;
        }
    }
    waiting() {
        return this.waitingForData;
    }
}
export const subscribe = (source, callbacks) => new Subscription(source, callbacks);
